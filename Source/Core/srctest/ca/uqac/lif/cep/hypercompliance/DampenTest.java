/*
    BeepBeep, an event stream processor
    Copyright (C) 2008-2023 Sylvain Hall√©

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package ca.uqac.lif.cep.hypercompliance;

import static org.junit.Assert.assertEquals;

import java.util.Queue;

import org.junit.Test;

import ca.uqac.lif.cep.Connector;
import ca.uqac.lif.cep.Pushable;
import ca.uqac.lif.cep.ltl.Troolean.Value;
import ca.uqac.lif.cep.tmf.QueueSink;

/**
 * Unit tests for {@link Dampen}.
 */
public class DampenTest
{
	@Test
	public void test1()
	{
		Dampen d = new Dampen(3, 3);
		QueueSink sink = new QueueSink();
		Connector.connect(d, sink);
		Queue<?> q = sink.getQueue();
		Pushable p = d.getPushableInput();
		p.push(Value.FALSE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(1, d.getFalseCount());
		p.push(Value.FALSE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(2, d.getFalseCount());
		p.push(Value.TRUE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(2, d.getFalseCount());
		p.push(Value.FALSE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(2, d.getFalseCount());
		p.push(Value.FALSE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(2, d.getFalseCount());
		p.push(Value.FALSE);
		assertEquals(Value.FALSE, q.remove());
		assertEquals(3, d.getFalseCount());
		p.push(Value.FALSE);
		assertEquals(Value.FALSE, q.remove());
		p.push(Value.TRUE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		p.push(Value.FALSE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		p.push(Value.FALSE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		p.push(Value.FALSE);
		assertEquals(Value.FALSE, q.remove());
	}
	
	@Test
	public void test2()
	{
		Dampen d = new Dampen(2, 4);
		QueueSink sink = new QueueSink();
		Connector.connect(d, sink);
		Queue<?> q = sink.getQueue();
		Pushable p = d.getPushableInput();
		p.push(Value.FALSE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(1, d.getFalseCount());
		p.push(Value.FALSE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(2, d.getFalseCount());
		p.push(Value.TRUE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(2, d.getFalseCount());
		p.push(Value.FALSE);
		assertEquals(Value.FALSE, q.remove());
		assertEquals(3, d.getFalseCount());
		p.push(Value.TRUE);
		assertEquals(Value.FALSE, q.remove());
		assertEquals(2, d.getFalseCount());
		p.push(Value.TRUE);
		assertEquals(Value.INCONCLUSIVE, q.remove());
		assertEquals(1, d.getFalseCount());
		p.push(Value.FALSE);
		assertEquals(Value.FALSE, q.remove());
	}
}
